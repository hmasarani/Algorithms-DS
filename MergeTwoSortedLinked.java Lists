/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode dummy = new ListNode();  // Create a dummy node to serve as the start of the merged list
        ListNode curr = dummy;  // Pointer to build the merged list

        // Traverse both lists
        while (list1 != null && list2 != null) {
            if (list1.val <= list2.val) {  // If list1's value is smaller or equal, append it to the merged list
                curr.next = list1;
                list1 = list1.next;  // Move to the next node in list1
            } else {  // Else append list2's node
                curr.next = list2;
                list2 = list2.next;  // Move to the next node in list2
            }
            curr = curr.next;  // Move the curr pointer forward
        }

        // At the end of the loop, one of the lists may still have elements left, so attach the remaining elements
        curr.next = (list1 != null) ? list1 : list2;

        return dummy.next;  // Return the merged list, which starts at dummy.next
    }
}
